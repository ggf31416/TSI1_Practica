@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
   
@section scripts{
     <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!-- Phaser -->
    <script src="~/Scripts/phaser.min.js"></script>
}


    <div class="container">
        <ul id="discussion"></ul>
    </div>
    <div id="divJuego">

    </div>

    

    <script>

        var game = new Phaser.Game(800, 600, Phaser.AUTO, 'divJuego', { preload: preload, create: create, update: update });

        var menuCuartel;
        var cursors;
        var tile_size = 128;

        function preload() {

            //  You can fill the preloader with as many assets as your game requires

            //  Here we are loading an image. The first parameter is the unique
            //  string by which we'll identify the image later in our code.

            //  The second parameter is the URL of the image (relative)
            // por ahora harcodeado
            game.load.image('grass', '/Content/img/grass.jpg');
            game.load.image('cuartel', '/Content/img/Barracks4.png');
            game.load.image('cuartelMenu', '/Content/img/cuartel.jpg');

        }

        var buildings;

        function create() {
            game.physics.startSystem(Phaser.Physics.ARCADE)
            game.world.resize(2000, 2000);

            var tile = game.add.tileSprite(0, 0, game.world.width, game.world.height, "grass");
            tile.tileScale = new PIXI.Point(0.25, 0.25);
            menuCuartel = game.add.sprite(0, 0, 'cuartelMenu');
            menuCuartel.width = 64;
            menuCuartel.height = 64;
            menuCuartel.inputEnabled = true;
            menuCuartel.events.onInputDown.add(function () { crearDragEdificio('cuartel'); }, this);
            menuCuartel.fixedToCamera = true;

            buildings = game.add.physicsGroup();

            cursors = game.input.keyboard.createCursorKeys();

        }

        function crearDragEdificio(imagen) {
            // worldX,Y obtienen la posicion del puntero en relacion al mundo
            // x,y solos obtinen en relacion a la camara
            var input_x = game.input.worldX;
            var input_y = game.input.worldY;

            var cuartel = game.add.sprite(input_x, input_y, imagen);
            
            cuartel.height = tile_size;
            cuartel.width = tile_size;
            cuartel.anchor.x = 0.5;
            cuartel.anchor.y = 0.5;
            cuartel.inputEnabled = true;
            cuartel.input.enableDrag();
            // tam_grilla_x,tam_grilla_y, ajustar a grilla al: arrastrar, soltar
            cuartel.input.enableSnap(tile_size, tile_size, true, true);
  
            cuartel.events.onDragStart.add(onDragStartBuild, this);
            cuartel.events.onDragStop.add(onDragStopBuild, this);
            cuartel.events.onDragUpdate.add(onDragUpdateBuild);
           
            game.physics.arcade.enable(cuartel);
            //var cuadrado = crearCuadrado(cuartel);
            //cuadrado.bringToTop();
            //cuartel.addChild(cuadrado);

        }

        function crearCuadrado(sprite) {
            var r = new Phaser.Rectangle(sprite.x, sprite.y, tile_size, tile_size);
            return r;
            /*var drawnObject;
            var width = 2 * sprite.body.width; // example;
            var height = 2 * sprite.body.height; // example;
            var bmd = game.add.bitmapData(width, height);

            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, width, height);
            bmd.ctx.fillStyle = '#00ff00';
            bmd.ctx.fill();
            drawnObject = game.add.sprite(sprite,sprite.camera.y, bmd);
            drawnObject.anchor.setTo(0, 0);
            return drawnObject;*/


        }


        function onDragStartBuild(sprite, pointer) {

        }


        function onDragUpdateBuild(sprite, pointer) {
            //game.debug.body(sprite);
            //crearCuadrado(sprite.x, sprite.y);
            //sprite.children[0].moveTo(sprite.x, sprite.y);
            if (game.physics.arcade.overlap(sprite, buildings)) {
                sprite.tint = 0xFF0000;
                game.debug.body(sprite, 'rgba(255, 0, 0, 0.5)');
                //game.debug.geom(sprite.children[0], 'rgba(0,255,0,0.5)');
            }
            else {
                sprite.tint = 0x00FF00;
                //game.debug.geom(sprite.children[0], 'rgba(0,0,255,0.5)');
                game.debug.body(sprite);
            }

        }

        function construccion(sprite) {
            var completionSprite = game.add.graphics(0, 0);
            completionSprite.beginFill(0xFFFF00, 0.5);
            completionSprite.bounds = new PIXI.Rectangle(sprite.x, sprite.y, sprite.width, sprite.height);
            completionSprite.drawRect(sprite.x - sprite.width / 2, sprite.y - sprite.height / 2, sprite.width, sprite.height);
            construir(sprite, completionSprite, 5);
        }

        function construir(sprite, rec, segundos) {
            game.time.events.add(Phaser.Timer.SECOND * segundos, function () {
                rec.destroy();
                sprite.alpha = 1;
                sprite.tint = 0xFFFFFF;
                enviarSignalR();
            }, this);
        }


        function onDragStopBuild(sprite, pointer) {
            if (!game.physics.arcade.overlap(sprite, buildings)) {
                if (!checkOverlap(sprite, menuCuartel)) {
                    sprite.input.draggable = false;
                    buildings.add(sprite);
                    
                    
                    game.debug.reset();
                    sprite.alpha = 0.8;
                    //sprite.tint = 0xFFFF00;
                    construccion(sprite);
                }

            }
            else {
                sprite.destroy();
                game.debug.reset();
            }
         
        }

        function checkOverlap(spriteA, spriteB) {

            var boundsA = spriteA.getBounds();
            var boundsB = spriteB.getBounds();

            return Phaser.Rectangle.intersects(boundsA, boundsB);
        }

        function update() {
            if (cursors.up.isDown) {
                game.camera.y -= 4;
            }
            else if (cursors.down.isDown) {
                game.camera.y += 4;
            }

            if (cursors.left.isDown) {
                game.camera.x -= 4;
            }
            else if (cursors.right.isDown) {
                game.camera.x += 4;
            }



        }


    </script>

    <script type="text/javascript">
        function enviarSignalR() {
            var chat = $.connection.atlasHub;
            chat.server.broadcastDesdeCliente("Build","Se ha construido un edificio");
        }

        $(function () {
            // Declare a proxy to reference the hub.
            // Por defecto es el nombre de la clase del hub en camelCase
            var chat = $.connection.atlasHub;
            // Create a function that the hub can call to broadcast messages.
            // Es usada en la recepción
            chat.client.recibirMensaje = function (motivo, message) {
                // Html encode display name and message.

                var title = $('<div />').text(motivo + ": ").html();
                var encodedMsg = $('<div />').text(message).html();
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + title
                    + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
            };

            $.connection.hub.start().done(function () {

            });
        });
    </script>

