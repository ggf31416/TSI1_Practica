@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
   
@section scripts{
     <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.2.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!-- Phaser -->
    <script src="~/Scripts/phaser.min.js"></script>
    
}
@{
    var tenant = ViewBag.Tenant;
}
<script type="text/javascript">
        var tenant = '@tenant';
</script>


    <div class="container">
        <ul id="discussion"></ul>
    </div>

    <script type="text/javascript">
        /*function enviarSignalR() {
            var chat = $.connection.atlasHub;
            chat.server.broadcastDesdeCliente("Build","Se ha construido un edificio");
        }

        $(function () {
            // Declare a proxy to reference the hub.
            // Por defecto es el nombre de la clase del hub en camelCase
            var chat = $.connection.atlasHub;
            // Create a function that the hub can call to broadcast messages.
            // Es usada en la recepción
            chat.client.recibirMensaje = function (motivo, message) {
                // Html encode display name and message.

                var title = $('<div />').text(motivo + ": ").html();
                var encodedMsg = $('<div />').text(message).html();
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + title
                    + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
            };

            $.connection.hub.start().done(function () {

            });
        });*/
    </script>

<div id="divEdificios" class="barraLateralJuego">
    <ul ng-repeat="e in listaEdificios | filter:{Imagen: ''}">
    <li>
        <div draggable="true" ng-click="posicionarEdificio(e.Id)" ng-mousedown="posicionarEdificio(e.Id)">
            <img width="50" height="50" ng-src="{{e.Imagen}}" alt="{{e.Id}}"  />
            <span class="caption">{{e.Nombre}}</span>
            <span class="caption">{{e.TiempoConstruccion}}s</span>
        </div>
    </li>
    </ul>
</div>

<div id="divUnidades" class="barraLateralJuego">
    <ul ng-repeat="e in listaUnidades | filter:{Imagen: ''}">
        <li>
            <div ng-mousedown="!puedoDesplegarUnidad(e.Id) || posicionarUnidad(e.Id)"  ng-disabled="!puedoDesplegarUnidad(e.Id)">
                <img width="50" height="50" ng-src="{{e.Imagen}}" alt="{{e.Id}}" ng-disabled="!puedoDesplegarUnidad(e.Id)" />
                <span class="caption">{{e.Nombre}}</span>
                <span class="caption">{{cantUnidad(e.Id)}}</span>
            </div>
        </li>
    </ul>
</div>

<div>
    <input type="button" value="Atacar" ng-click="mostrarEnemigos()" />
</div>


<ul id="listaEnemigos" ng-repeat="e in listaEnemigos" >
    <li>
        <p ng-mousedown="iniciarAtaque(e.Id)">{{e.Id}}</p>
    </li>
   
</ul>

<div
  class="fb-like"
  data-share="true"
  data-width="450"
  data-show-faces="true">
</div>

<script> 
    $(document).ready(function () {
        //$('#divUnidades').toggle(false);
        $('#listaEnemigos').toggle(false);
    })
</script>

<script>
  // This is called with the results from from FB.getLoginStatus().
  function statusChangeCallback(response) {
    // The response object is returned with a status field that lets the
    // app know the current login status of the person.
    // Full docs on the response object can be found in the documentation
    // for FB.getLoginStatus().
    if (response.status === 'connected') {
        // Logged into your app and Facebook.
        
      testAPI();
    } else if (response.status === 'not_authorized') {
      // The person is logged into Facebook, but not your app.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into this app.';
    } else {
      // The person is not logged into Facebook, so we're not sure if
      // they are logged into this app or not.
      document.getElementById('status').innerHTML = 'Please log ' +
        'into Facebook.';
    }
  }

  // This function is called when someone finishes with the Login
  // Button.  See the onlogin handler attached to it in the sample
  // code below.
  function checkLoginState() {
      FB.getLoginStatus(function (response) {
          console.log('afuera');
          angular.element($('#login')).scope().loginJuego(response);
    });
  }

  window.fbAsyncInit = function () {
      FB.init({
          appId: '1091835854211637',
          cookie: true,  // enable cookies to allow the server to access
          // the session
          xfbml: true,  // parse social plugins on this page
          version: 'v2.6' // use version 2.2
      });

      // Now that we've initialized the JavaScript SDK, we call
      // FB.getLoginStatus().  This function gets the state of the
      // person visiting this page and can return one of three states to
      // the callback you provide.  They can be:
      //
      // 1. Logged into your app ('connected')
      // 2. Logged into Facebook, but not your app ('not_authorized')
      // 3. Not logged into Facebook and can't tell if they are logged into
      //    your app or not.
      //
      // These three cases are handled in the callback function.

      FB.getLoginStatus(function (response) {
          angular.element($('#login')).scope().loginJuego(response);
      });
  };
  // Here we run a very simple test of the Graph API after login is
  // successful.  See statusChangeCallback() for when this call is made.
  function testAPI() {
    console.log('Welcome!  Fetching your information.... ');
    FB.api('/me', function(response) {
      console.log('Successful login for: ' + response.name);
      document.getElementById('status').innerHTML =
        'Thanks for logging in, ' + response.name + '!';
    });
  }
</script>

<game-canvas></game-canvas>

<div id="main" ng-controller="juegoCtrl">
    <div id="login" class="fb-login-button" data-max-rows="1" onlogin="checkLoginState()" data-size="medium" data-show-faces="false" data-auto-logout-link="true"></div>

    <div id="modalRegistro" class="modal fade" role="dialog">
        <div class="modal-dialog modal-sm">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Registro</h4>
                </div>
                <div class="modal-body">
                    <form ng-submit="submitRegister()">
                        <div class="form-group">
                            <label for="usr">Username:</label>
                            <input type="text" class="form-control" id="username_register">
                        </div>
                        <div class="form-group">
                            <label for="usr">Nombre:</label>
                            <input type="text" class="form-control" id="nombre_register">
                        </div>
                        <div class="form-group">
                            <label for="pwd">Apellido:</label>
                            <input type="text" class="form-control" id="apellido_register">
                        </div>
                        <input class="btn btn-primary" type="submit" name="register" value="Submit" />
                    </form>
                </div>
                <div class="modal-footer">
                </div>
            </div>

        </div>
    </div>
    <!-- <div id="divJuego"  ondrop = "drop(event)" ondragover = "allowDrop(event)"></div> -->
</div>